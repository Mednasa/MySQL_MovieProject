-- 1.Write a query to list all movies.

    SELECT movie_title
	FROM Movies;

-- 2.List the top 5 movies with the highest IMDb rating.

    SELECT * FROM Movies
    ORDER BY imdb_rating DESC
	LIMIT 5;

-- 3.Write a query to list movies released after the year 2000.

   SELECT * FROM Movies
   WHERE release_year > 2000
   ORDER BY release_year;

-- 4.List movies of a specific genre (e.g., "Action").

    SELECT movie_title, genre
    FROM Movies
    WHERE genre LIKE '%Action%';

-- 5.Write a query to list all movies directed by a specific director (e.g., "Christopher Nolan").

    SELECT movie_title, director_name, release_year
    FROM Movies
	LEFT JOIN Directors ON Movies.movie_id = Directors.movie_id
	HAVING director_name = 'Christopher Nolan'
    ORDER BY release_year;

-- 6.List movies with an IMDb rating greater than 8.

   SELECT movie_title, imdb_rating
   FROM Movies
   imdb_rating > 8
   ORDER BY imdb_rating DESC;

-- 7.List movies released between 1990 and 2000.

   SELECT * FROM Movies
   WHERE release_year BETWEEN 1990 AND 2000
   ORDER BY release_year;

-- 8.Find the movie with the highest IMDb rating.

   SELECT  movie_title, MAX(imdb_rating) AS MaxRatingMovie
   FROM Movies;

-- 9.List the 3 movies with the lowest IMDb ratings.

   SELECT * FROM Movies
   ORDER BY imdb_rating
   LIMIT 3;

-- 10.List "Comedy" genre movies ordered by IMDb rating in descending order.

   SELECT movie_title, genre, imdb_rating
   FROM Movies
   WHERE genre LIKE '%Comedy%'
   ORDER BY imdb_rating DESC;

-- 11.Write a query to list all directors.

   SELECT DISTINCT(director_name)
   FROM Directors;

-- 12.List directors born before 1970.

   SELECT DISTINCT (director_name), birth_year
   FROM Directors
   WHERE birth_year < 1970
   ORDER BY birth_year;

-- 13.Write a query to list movies directed by a specific director (e.g., "Steven Spielberg").

   SELECT movie_title, director_name, release_year
   FROM Movies
   LEFT JOIN
   Directors ON Movies.movie_id = Directors.movie_id
   HAVING director_name = 'Steven Spielberg'
   ORDER BY release_year;

-- 14.Write a query that shows the number of movies directed by each director.

   SELECT director_name, COUNT(*) AS amount
   FROM Directors
   GROUP BY director_name
   ORDER BY amount DESC;

-- 15.Find the director who has directed the most movies.

   SELECT director_name, COUNT(*) AS amount
   FROM Directors
   GROUP BY director_name
   ORDER BY amount DESC
   LIMIT 1;

-- 16.Write a query to list directors born in the same year.

   SELECT birth_year, COUNT(*) AS amount
   FROM Directors
   GROUP BY birth_year
   ORDER BY amount DESC;

-- 17.List directors ordered by their birth year.

   SELECT DISTINCT (director_name), birth_year
   FROM Directors
   ORDER BY birth_year;

-- 18.Find the youngest director.

   SELECT director_name, birth_year
   FROM Directors
   WHERE birth_year = (SELECT MAX(birth_year)
   FROM Directors);

-- 19.Find the director whose movies have the highest average IMDb rating.

   SELECT movie_title, director_name, AVG(imdb_rating)
   FROM Movies
   LEFT JOIN
   Directors ON Movies.movie_id = Directors.movie_id
   GROUP BY director_name
   ORDER BY AVG(imdb_rating) DESC
   LIMIT 1;

-- 20.Write a query to list all users..

   SELECT * FROM Users;

-- 21.List users with the first name "John.".

   SELECT * FROM Users
   WHERE username LIKE '%John%';

-- 22.Write a query to find the total number of registered users..

   SELECT  COUNT(*) AS TotalAmount
   FROM Users;

-- 23.List users who have made more than 4 comments.

   SELECT username,comment_content,movie_title
   FROM Comments
   LEFT JOIN Users ON Comments.user_id = Users.user_id
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   WHERE Users.user_id IN (
   SELECT user_id
   FROM Comments
   GROUP BY user_id
   HAVING count(*)>4)
   ORDER BY username,movie_title;

-- 24.Write a query to list users who haven’t made any comments.

   SELECT user_id
   FROM Comments
   GROUP BY user_id
   HAVING COUNT(*) = 1; -- (en az 1 yorum yapan kullanıcı mevcut)

-- 25.Find the user who has made the most comments.

   SELECT username,COUNT(*) AS comment_count
   FROM Comments
   LEFT JOIN Users ON Comments.user_id = Users.user_id
   GROUP BY username
   ORDER BY comment_count DESC
   LIMIT 1;

-- 26.List users who made comments on the same day.

   SELECT username, DATE(comment_date)
   FROM Comments
   LEFT JOIN
   Users ON Comments.user_id = Users.user_id
   GROUP BY username , DATE(comment_date)
   ORDER BY DATE(comment_date);

-- 27.Find the user with the email "@gmail.com."

   SELECT username, email
   FROM Users
   WHERE email LIKE '%@gmail.com%';

-- 28.Write a query to find users with the same password.

   SELECT password,GROUP_CONCAT(username ORDER BY username) AS user_with_same_password
   FROM Users
   GROUP BY password
   HAVING COUNT(*) > 1;

-- 29.Write a query to list all comments.

   SELECT  comment_content
   FROM Comments;

-- 30.List all comments on a specific movie (e.g., "The Dark Knight").

   SELECT movie_title, comment_content, username
   FROM Comments
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   LEFT JOIN Users ON Comments.user_id = Users.user_id
   HAVING movie_title = 'The Dark Knight';

-- 31.List comments made by a specific user (e.g., "LunarLion").

   SELECT username, movie_title, comment_content
   FROM Users
   LEFT JOIN Comments ON Users.user_id = Comments.user_id
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   HAVING username = 'LunarLion';

-- 32.List the most recent comments ordered by the comment date.

   SELECT movie_title, comment_content, comment_date
   FROM Comments
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   ORDER BY comment_date DESC;

-- 33.Write a query to list comments made on a specific date (e.g., 2024-11-29).

   SELECT movie_title, comment_content, comment_date
   FROM Comments
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   WHERE comment_date LIKE '%2024-11-29%';

-- 34.Find the oldest comment on a specific movie.

   SELECT movie_title, comment_content, comment_date
   FROM Comments
   LEFT JOIN
   Movies ON Comments.movie_id = Movies.movie_id
   HAVING movie_title = 'The Lord of the Rings: The Fellowship of the Ring'
   ORDER BY comment_date
   LIMIT 1;

-- 35.List comments on movies with an IMDb rating greater than 8.8

   SELECT imdb_rating, comment_content, movie_title
   FROM Movies
   LEFT JOIN Comments ON Movies.movie_id = Comments.movie_id
   WHERE imdb_rating > 8.8 and comment_content  IS NOT NULL;

-- 36 List movies with no comments

   SELECT movie_title, comment_content, comment_date, imdb_rating
   FROM Movies
   LEFT JOIN Comments ON Movies.movie_id = Comments.movie_id
   WHERE comment_content IS NULL;

-- 37.Write a query to list movies that have more than 3 comments.

   SELECT movie_title, comment_content
   FROM Comments
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   WHERE Movies.movie_title IN (SELECT movie_title
   FROM Comments
   LEFT JOIN
   Movies ON Comments.movie_id = Movies.movie_id
   GROUP BY movie_title
   HAVING COUNT(*) > 3)
   ORDER BY movie_title;

   SELECT movie_title, COUNT(*) AS number_of_comments
   FROM Comments
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   GROUP BY movie_title
   HAVING number_of_comments > 3;

-- 38.Write a query that shows the number of comments made on each movie.

   SELECT movie_title, COUNT(*) AS number_of_comments
   FROM Comments
   LEFT JOIN Movies ON Comments.movie_id = Movies.movie_id
   GROUP BY movie_title
   HAVING number_of_comments > 1;